#!/bin/bash
# bing-ip2hosts - Enumerate hostnames from Bing.com for an IP address.

VERSION="0.5"
TMPDIR="/tmp"
ANIMATION=1
OUTPUTIP=0
HTTPPREFIX=0
DEBUG=0

if [[ -z "$1" || "$1" == "-h" || "$1" == "--help" ]]; then
    echo -e "\033[31mbing-ip2hosts ($VERSION) by Andrew Horton aka urbanadventurer\033[0m"
    echo -e "Homepage: http://www.morningstarsecurity.com/research/bing-ip2hosts\n"
    echo -e "Usage: $0 [OPTIONS] <IP|hostname>\n"
    echo -e "OPTIONS are:"
    echo -e "-n\t\tTurn off the progress indicator animation"
    echo -e "-t <DIR>\tUse this directory instead of /tmp. The directory must exist."
    echo -e "-i\t\tOptional CSV output. Outputs the IP and hostname on each line, separated by a comma."
    echo -e "-p\t\tOptional http:// prefix output. Useful for right-clicking in the shell."
    exit 1
fi

while getopts "nipt:" opt; do
    case "$opt" in
        n) ANIMATION=0;;
        t) TMPDIR="$OPTARG";;
        i) OUTPUTIP=1;;
        p) HTTPPREFIX=1;;
        ?) echo "Error"; exit 1;;
    esac
done

shift $((OPTIND-1))

if [[ -z "$1" ]]; then
    echo "Error: need an IP or hostname"
    exit 1
fi

# Check and resolve IP
if [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ || "$1" =~ \[[a-f0-9:]+\] ]]; then
    IP="$1"
else
    IP=$(nslookup "$1" 2>/dev/null | awk '/^Address: / { print $2 }' | tail -1)
    if [[ -z "$IP" ]]; then
        echo "Error: cannot resolve $1 to an IP"
        exit 1
    fi
fi

all_hosts=$(mktemp -p "$TMPDIR" -t bing-ip2hosts.XXXXXX)
page=0
uniq_hosts=0
animation="|/-\\"

while :; do
    if [[ $ANIMATION -eq 1 ]]; then
        printf "\r[ $IP | Scraping Page $((page + 1)) | Found $uniq_hosts | ${animation:page%4:1} ]"
    fi
    url="http://www.bing.com/search?q=ip%3A$IP&first=${page}0&FORM=PERE"
    out=$(mktemp -p "$TMPDIR" -t bing-ip2hosts-out.XXXXXX)
    curl -s "$url" -o "$out"

    # Process results and determine if there is a next page
    how_many=$(grep -oP '<span class="sb_count" id="count">[^<]+' "$out" | cut -d '>' -f 2 | cut -d ' ' -f 1-3)

    if [[ -z "$how_many" ]]; then
        break
    fi

    # Extract and store hosts
    grep -oP "<h3><a href=\"[^\"]+" "$out" | cut -d '"' -f 2 | tee -a "$all_hosts"

    # Update unique hosts count
    uniq_hosts=$(cut -d '/' -f 3 < "$all_hosts" | tr '[:upper:]' '[:lower:]' | sort | uniq | wc -l)

    ((page++))
    if [[ $DEBUG -eq 1 ]]; then
        echo "Page: $page"
    fi

    # Cleanup the temporary output file
    rm -f "$out"
done

if [[ $ANIMATION -eq 1 ]]; then
    echo
fi

# Final processing of unique hosts
uniq_hosts=$(cut -d '/' -f 3 < "$all_hosts" | tr '[:upper:]' '[:lower:]' | sort | uniq)

# Cleanup the main temporary file
rm -f "$all_hosts"

PREFIX=""
[[ $OUTPUTIP -eq 1 ]] && PREFIX="$IP,"
[[ $HTTPPREFIX -eq 1 ]] && PREFIX="http://${PREFIX}"

for h in $uniq_hosts; do
    echo "${PREFIX}${h}"
done
